#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Command line tool to send notfications for intelmq events.
"""

import smtplib
import argparse
import json
import locale
import os
import sys
import io
import csv
import string
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

import psycopg2
from psycopg2.extras import RealDictConnection
from termstyle import red


if locale.getpreferredencoding() != 'UTF-8':
    print(red('The preferred encoding of your locale setting is not UTF-8 but'
              '{}. Exiting.'.format(locale.getpreferredencoding())))
    exit(1)


APPNAME = "intelmq-mailgen"
DESCRIPTION = """
"""

EPILOG = """
Searches for all unprocessed notifications and sends them.
"""

USAGE = """
    intelmq-mailgen
    intelmq-mailgen --all
"""


def read_configuration():
    """Read configuration from user and system settings.
    The return value is a dictionary containing the merged settings read
    from the configuration files.
    """
    # Construct a single configuration dictionary with the contents of
    # the different conf files
    home = os.path.expanduser("~")  # needed for OSX
    with open(os.path.expanduser(home + '/.intelmq/intelmq-mailgen.conf')) \
         as conf_handle:
        user_config = json.load(conf_handle)
    with open('/etc/intelmq/intelmq-mailgen.conf') as conf_handle:
        system_config = json.load(conf_handle)

    combined = system_config.copy()
    for key, value in user_config.items():
        if isinstance(combined.get(key), dict):
            combined[key].update(value)
        else:
            combined[key] = value

    return combined


def open_db_connection(config):
    params = config['database']['event']
    return psycopg2.connect(database=params['name'],
                            user=params['username'],
                            password=params['password'],
                            host=params['host'],
                            port=params['port'],
                            # sslmode=params['sslmode'],
                            connection_factory=RealDictConnection)


def full_template_filename(template_dir, template_name):
    """Return the full absolute file name of a template.

    The template_name parameter is interpreted relative to template_dir
    and must refer to a file under that directory. If the resulting file
    name would name a file outside of template_dir, a ValueError
    exception is raised. This check is done to guard against malicious
    template names.
    """
    # make sure absbase ends with "/" so that the check whether the
    # resulting template file name is located under template_dir
    # actually works. os.path.abspath will remove any trailing slashes
    # from its parameter so we can simply append a single one.
    absbase = os.path.abspath(template_dir) + os.path.sep
    absfilename = os.path.abspath(os.path.join(template_dir, template_name))
    if not absfilename.startswith(absbase):
        raise ValueError("Invalid template name %r! Full template filename"
                         " would be outside of the template base directory %r."
                         % (template_name, template_dir))
    return absfilename


def read_template(template_dir, template_name):
    """Read the email template indicated by template_dir and template_name.
    The name of the template file is determined with
    full_template_filename. The first line of the file is assumed to be
    the subject line of the email. The rest of the lines are the email
    body. Leading and trailing white space is removed from the body and
    a newline added at the end. This allows e.g. an empty line in the
    template between the subject line and the body.
    """
    with open(full_template_filename(template_dir, template_name)) as infile:
        subject = None
        while not subject:
            subject = infile.readline().strip()
        body = infile.read().strip() + "\n"
        return subject, body


def create_mail(sender, recipient, subject, body, attachments):
    msg = MIMEMultipart()
    msg.add_header("From", sender)
    msg.add_header("To", recipient)
    msg.add_header("Subject", subject)
    msg.attach(MIMEText(body))

    for filename, contents, maintype, subtype in attachments:
        part = MIMEBase(maintype, subtype, filename=filename)
        part.set_payload(contents)
        msg.attach(part)

    return msg


# characters allowed in identifiers in escape_sql_identifier. There are
# just the characters that are used in IntelMQ for identifiers in the
# events table.
sql_identifier_charset = set(string.ascii_letters + string.digits + "_.")

def escape_sql_identifier(ident):
    if set(ident) - sql_identifier_charset:
        raise ValueError("Event column identifier %r contains invalid"
                         " characters (%r)"
                         % (ident, set(ident) - sql_identifier_charset))
    return '"' + ident + '"'


def load_events(cur, columns, event_ids):
    sql_columns = ", ".join(escape_sql_identifier(col) for col in columns)
    cur.execute("SELECT {} FROM events WHERE id = ANY (%s)".format(sql_columns),
                (event_ids,))
    return cur.fetchall()


malware_as_csv_columns = [
    "source.asn", "source.ip", "time.source",
    "malware.name", "source.port", "destination.ip",
    "destination.port", "protocol.transport",
    "destination.fqdn",
]

def format_malware_as_csv(events):
    contents = io.StringIO()
    writer = csv.DictWriter(contents, malware_as_csv_columns, delimiter="|")
    for event in events:
        writer.writerow(event)
    return ("events.csv", contents.getvalue(), "text", "csv")


known_formats = {
    "malware_as_csv": (malware_as_csv_columns, format_malware_as_csv),
    }


def format_event_data(cur, format, event_ids):
    format_spec = known_formats.get(format)
    if format_spec is not None:
        columns, converter = format_spec
        return converter(load_events(cur, columns, event_ids))
    else:
        print("Cannot generate emails for unknown format %r" % format,
              file=sys.stderr)


def mark_as_sent(cur, notification):
    cur.execute("""WITH ticket AS (SELECT nextval('intelmq_ticket_seq'))
                 UPDATE notifications
                    SET sent_at = now(),
                        intelmq_ticket = (SELECT * FROM ticket)
                  WHERE id = ANY (%s);""",
                (notification["notification_ids"],))


def send_notifications(config, notifications, cur):
    """
    Create and send notification mails for all items in notifications.

    All notifications that were successfully sent are marked as sent in
    the database. This function tries to make sure that this information
    can be committed as part of the transaction in progress even if
    errors occur during SQL statements executed by this function. The
    caller should also catch exceptions thrown by this method and always
    commit the transaction.

    :param config script configuration
    :param notifications a list of notifications
    :param cur database cursor to use when loading event information
    """
    with smtplib.SMTP(host=config["smtp"]["host"],
                      port=config["smtp"]["port"]) as smtp:
        for notification in notifications:
            cur.execute("SAVEPOINT sendmail;")
            try:
                attachments = []
                event_attachment = format_event_data(cur,
                                                     notification["format"],
                                                     notification["event_ids"])
                if event_attachment is not None:
                    attachments.append(event_attachment)

                subject, body = read_template(config["template_dir"],
                                              notification["template"])

                smtp.send_message(create_mail(sender=config["sender"],
                                              recipient=notification["email"],
                                              subject=subject, body=body,
                                              attachments=attachments))
                mark_as_sent(cur, notification)
            except:
                cur.execute("ROLLBACK TO SAVEPOINT sendmail;")
                raise
            finally:
                cur.execute("RELEASE SAVEPOINT sendmail;")


def get_pending_notifications(cur):
    """Retrieve all pending notifications from the database.
    Notifications are pending if they haven't been sent yet.
    Notifications are grouped by recipient, template and format so that
    the information about the events for which the notifications are
    sent can be aggregated.
    """
    cur.execute("""\
        SELECT n.email as email, n.template as template, n.format as format,
               array_agg(n.events_id) as event_ids,
               array_agg(n.id) as notification_ids
          FROM (SELECT * FROM notifications
                WHERE intelmq_ticket IS NULL
                FOR UPDATE NOWAIT) n
      GROUP BY n.email, n.template, n.format
        HAVING coalesce((SELECT max(sent_at) FROM notifications n2
                         WHERE n2.email = n.email AND n2.template = n.template
                         AND n2.format = n.format)
                        + max(n.notification_interval)
                        < CURRENT_TIMESTAMP,
                        TRUE);""")
    return cur.fetchall()


def generate_notifications_interactively(config, cur, notifications):
    batch_size = 10

    pending = notifications[:]
    while pending:
        batch, pending = pending[:batch_size], pending[batch_size:]
        print('Current batch (%d of %d total):'
              % (len(batch), len(batch) + len(pending)))
        for i in batch:
            print('    * {0} {1} {2}: {3} events'.format(
                i["email"], i["template"], i["format"], len(i["event_ids"])))
        valid_answers = ("c", "s", "a", "q")
        while True:
            answer = input("Options: [c]ontinue, [s]end this batch, send [a]ll,"
                           " [q]uit? ").strip()
            if answer not in valid_answers:
                print("Please enter one of the characters %s"
                      % ", ".join(valid_answers))
            else:
                break
        if answer == "c":
            print("Skipping this batch.")
            pass
        elif answer == "q":
            print("Exiting without sending any further mails.")
            pending = []
        else:
            to_send = batch
            if answer == "a":
                to_send.extend(pending)
                pending = []

            print("Sending %d mails... " % (len(to_send),))
            send_notifications(config, to_send, cur)
            print("%d mails sent. " % (len(to_send),))


def generate_notifications(args, config):
    cur = None
    conn = open_db_connection(config)
    try:
        cur = conn.cursor()
        notifications = get_pending_notifications(cur)
        if not notifications:
            print("No pending notifications to be sent")
            return

        if args.all:
            send_notifications(config, notifications, cur)
        else:
            generate_notifications_interactively(config, cur, notifications)

    finally:
        if cur is not None:
            cur.close()
        # the only change to the database is marking the sent mails as
        # actually sent. We always want to commit that information even
        # when errors occur, so we're calling commit in the finally
        # block.
        conn.commit()
        conn.close()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog=APPNAME,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        usage=USAGE,
        description=DESCRIPTION,
        epilog=EPILOG,
    )
    parser.add_argument('-a', '--all', action='store_true',
                        help='Process all events (batch mode)')
    args = parser.parse_args()

    config = read_configuration()

    generate_notifications(args, config)
