#!/bin/sh
set -e

# Source debconf library.
. /usr/share/debconf/confmodule

warn_and_backup_config () {
    # Warn about potential data loss when reconfiguration, i.e.,
    # recreating, the config file
    local DEFAULT_CONF_FILE="/etc/intelmq/intelmq-mailgen.conf"
    if [ -f "$DEFAULT_CONF_FILE" ]; then
        db_input critical intelmq-mailgen/reconfigure-warning || true
        cp -a "$DEFAULT_CONF_FILE" "${DEFAULT_CONF_FILE}.dpkg-old"
    fi
}

# Present a different menu depending on whether this is a first-time
# configuration or reconfiguration.
#
# Upon reconfiguration we don't offer the choice to install an example config
# file. The reason is that debconf will have cached the previous, potentially
# custom values at this point, so creating the example file is no longer as
# easy as just writing out the existing default values.  Instead, the defaults
# would either have to be restored or the example file would have to be
# installed by other means.
#
# We could just copy the example file in postinst; however, doing so would make
# the file contents and the debconf cache diverge.
#
# debconf-set-selections could probably be used to set the example values; however,
# this would mean maintaining the defaults in three places:
#   1) the shipped example config
#   2) the "Default:" settings in the templates file
#   3) the debconf-set-selections inputs in this file
#
if [ "$1" = "reconfigure" ] || [ "${DEBCONF_RECONFIGURE}" = "1" ]; then
    db_input high intelmq-mailgen/config-choice-reconf || true
    db_go || true
    db_get intelmq-mailgen/config-choice-reconf
    CONFIG_CHOICE="$RET"
    db_set intelmq-mailgen/import-test-openpgp-key false || true
else
    db_input high intelmq-mailgen/config-choice || true
    db_go || true
    db_get intelmq-mailgen/config-choice
    CONFIG_CHOICE="$RET"
fi

# Choices: Configure now, Install example configuration, Do not configure
case "$CONFIG_CHOICE" in
    "Configure now")
        warn_and_backup_config
        db_set intelmq-mailgen/write-config "true" || true

        # Mail settings
        db_input high intelmq-mailgen/mailsender || true
        db_input high intelmq-mailgen/mailhost || true
        db_input high intelmq-mailgen/mailport || true

        # DB settings
        db_input high intelmq-mailgen/dbhost || true
        db_input high intelmq-mailgen/dbport || true
        db_input high intelmq-mailgen/dbname || true
        db_input high intelmq-mailgen/dbuser || true
        db_input high intelmq-mailgen/dbpass || true

        # Template dir
        db_input medium intelmq-mailgen/templatedir || true

        # OpenPGP
        db_input high intelmq-mailgen/openpgp-alwayssign || true
        db_go || true
        db_get intelmq-mailgen/openpgp-alwayssign
        if [ "$RET" = "true" ]; then
            db_input high intelmq-mailgen/openpgp-gnupghome || true
            db_input high intelmq-mailgen/openpgp-signingkey || true
        fi
        ;;
    "Install example configuration")
        # By not asking the questions as above the defaults will be used.  It
        # is, therefore, important that all questions in the templates file
        # have the correct "Default:" value set.
        db_set intelmq-mailgen/write-config "true" || true
        db_input high intelmq-mailgen/import-test-openpgp-key || true
        db_go || true
        db_get intelmq-mailgen/import-test-openpgp-key
        if [ "$RET" = "true" ]; then
            # Enable OpenPGP signing in config file
            db_set intelmq-mailgen/openpgp-alwayssign true || true
        fi
        ;;
esac

# TODO: ensure answers aren't empty, at least those needed for the DB setup


# Postgres configuration
# Set to false, so the postinst install won't be rerun on reconfigure
db_set intelmq-mailgen/pgconfig-configure "false" || true
db_get intelmq-mailgen/dbhost || true

# Possible improvement: don't forget that we configured the DB before and add
# an extra confirmation dialog before trying to set it up again.

DBHOST="$RET"
if [ "$DBHOST" = "localhost" ]; then
    # Analyse DB
    POSTGRES_EXISTS=0
    DB_EXISTS=0
    TABLE_EXISTS=0
    db_get intelmq-mailgen/dbname || true
    DBNAME="$RET"
    # check postgres
    if getent passwd postgres >/dev/null 2>&1; then
        POSTGRES_EXISTS=1
        # check for DB
        DB_EXISTS=$(su --login --command "psql --list |
            awk -vdbname=$DBNAME '\$1 == dbname {print \$1}'" postgres |
            wc -l) # Equals 1 if found
    fi
    # Check if DB exists and has not been configured by mailgen before
    db_get intelmq-mailgen/pgconfig-configure-success
    if [ "$DB_EXISTS" -eq 1 ] && [ "$RET" = "false" ]; then
        # Ask whether to configure now
        db_input high intelmq-mailgen/pgconfig-ask || true
        db_go || true
        db_get intelmq-mailgen/pgconfig-ask || true
        case "$RET" in
            "false")
                # Refer to documentation
                db_input high intelmq-mailgen/pgconfig-manual || true
                ;;
            "true")
                # check for table "notifications" which is one of tables going to be
                # added by mailgen's notifications.sql script
                TABLE_EXISTS=$(su --login --command \
                    "psql --tuples-only --command=\"SELECT COUNT(*) FROM pg_tables
                    WHERE tablename='notifications';\" $DBNAME" postgres |
                    awk 'NR == 1 {print $1}') # Equals 1 if found
                if [ "$TABLE_EXISTS" -eq 1 ]; then
                    db_input critical intelmq-mailgen/pgconfig-error-tableexists || true
                else
                    db_set intelmq-mailgen/pgconfig-configure "true" || true
                fi
                ;;
        esac
    else
        # Refer to documentation
        db_input high intelmq-mailgen/pgconfig-manual || true
    fi
else
    # Refer to documentation
    db_input high intelmq-mailgen/pgconfig-manual || true
fi

db_go || true

# vim :set et sw=4 ts=4:
