#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Command line tool to send notfications for intelmq events.
"""

import smtplib
import argparse
import json
import locale
import os
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication

import psycopg2
import psycopg2.extras
from termstyle import red


if locale.getpreferredencoding() != 'UTF-8':
    print(red('The preferred encoding of your locale setting is not UTF-8 but'
              '{}. Exiting.'.format(locale.getpreferredencoding())))
    exit(1)


EMAIL_FROM = 'noreply@example.com'

APPNAME = "intelmqcli"
DESCRIPTION = """
"""

EPILOG = """
Searches for all unprocessed notifications and sends them.
"""

USAGE = """
    intelmqcli
    intelmqcli --all
"""


def read_configuration():
    """Read configuration from user and system settings.
    The return value is a dictionary containing the merged settings read
    from the configuration files.
    """
    # Construct a single configuration dictionary with the contents of
    # the different conf files
    home = os.path.expanduser("~")  # needed for OSX
    with open(os.path.expanduser(home + '/.intelmq/intelmqcli.conf')) \
         as conf_handle:
        user_config = json.load(conf_handle)
    with open('/etc/intelmq/intelmqcli.conf') as conf_handle:
        system_config = json.load(conf_handle)

    combined = system_config.copy()
    for key, value in user_config.items():
        if isinstance(combined.get(key), dict):
            combined[key].update(value)
        else:
            combined[key] = value

    return combined


def open_db_connection(config):
    conn = psycopg2.connect(database=config['database']['event']['name'],
                            user=config['database']['event']['username'],
                            password=config['database']['event']['password'],
                            host=config['database']['event']['host'],
                            port=config['database']['event']['port'],
                            # sslmode=config['database']['event']['sslmode'],
                            )
    cur = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
    conn.autocommit = True
    return cur


def full_template_filename(template_dir, template_name):
    """Return the full absolute file name of a template.

    The template_name parameter is interpreted relative to template_dir
    and must refer to a file under that directory. If the resulting file
    name would name a file outside of template_dir, a ValueError
    exception is raised. This check is done to guard against malicious
    template names.
    """
    # make sure absbase ends with "/" so that the check whether the
    # resulting template file name is located under template_dir
    # actually works. os.path.abspath will remove any trailing slashes
    # from its parameter so we can simply append a single one.
    absbase = os.path.abspath(template_dir) + os.path.sep
    absfilename = os.path.abspath(os.path.join(template_dir, template_name))
    if not absfilename.startswith(absbase):
        raise ValueError("Invalid template name %r! Full template filename"
                         " would be outside of the template base directory %r."
                         % (template_name, template_dir))
    return absfilename


def read_template(template_dir, template_name):
    """Read the email template indicated by template_dir and template_name.
    The name of the template file is determined with
    full_template_filename. The first line of the file is assumed to be
    the subject line of the email. The rest of the lines are the email
    body. Leading and trailing white space is removed from the body and
    a newline added at the end. This allows e.g. an empty line in the
    template between the subject line and the body.
    """
    with open(full_template_filename(template_dir, template_name)) as infile:
        subject = None
        while not subject:
            subject = infile.readline().strip()
        body = infile.read().strip() + "\n"
        return subject, body


def create_mail(sender, recipient, subject, body):
    msg = MIMEMultipart()
    msg.add_header("From", sender)
    msg.add_header("To", recipient)
    msg.add_header("Subject", subject)
    msg.attach(MIMEText(body))
    return msg


def send_notifications(config, notifications):
    """Create and send notification mails for all items in notifications.
    :param config script configuration
    :param notifications a list of notifications
    """
    with smtplib.SMTP(host=config["smtp"]["host"],
                      port=config["smtp"]["port"]) as smtp:
        for notification in notifications:
            subject, body = read_template(config["template_dir"],
                                          notification["template"])
            smtp.send_message(create_mail(sender=EMAIL_FROM,
                                          recipient=notification["email"],
                                          subject=subject, body=body))


def get_pending_notifications(cur):
    """Retrieve all pending notifications from the database.
    Notifications are pending if they haven't been sent yet.
    Notifications are grouped by recipient, template and format so that
    the information about the events for which the notifications are
    sent can be aggregated.
    """
    cur.execute("""\
        SELECT n.email as email, n.template as template, n.format as format,
               array_agg(n.events_id) as event_ids,
               array_agg(n.id) as notification_ids
          FROM (SELECT * FROM notifications
                WHERE intelmq_ticket IS NULL
                FOR UPDATE NOWAIT) n
      GROUP BY n.email, n.template, n.format
        HAVING coalesce((SELECT max(sent_at) FROM notifications n2
                         WHERE n2.email = n.email AND n2.template = n.template
                         AND n2.format = n.format)
                        + max(n.notification_interval)
                        < CURRENT_TIMESTAMP,
                        TRUE);""")
    return cur.fetchall()


def generate_notifications(args, config):
    cur = open_db_connection(config)
    event_list = get_pending_notifications(cur)
    while event_list:
        to_process = event_list[:10]
        if not args.all:
            print('Current batch:')
            for i in to_process:
                print('    * {0} {1} {2}: {3} events'.format(
                    i["email"], i["template"], i["format"],
                    len(i["event_ids"])))

        if args.all:
            answer = 'a'
        else:
            answer = input('Options: [c]ontinue, [s]end this batch, send [a]ll,'
                           ' [q]uit? ')

        if answer == 'c':
            print('Continue')
        elif answer == 's':
            print('Sending this batch')
            event_list[:10] = []
            send_notifications(config, to_process)
        elif answer == 'a':
            print('Sending all')
            to_process = event_list[:]
            event_list = []
            send_notifications(config, to_process)
        else:
            print('Exiting')
            break


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog=APPNAME,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        usage=USAGE,
        description=DESCRIPTION,
        epilog=EPILOG,
    )
    parser.add_argument('-a', '--all', action='store_true',
                        help='Process all events (batch mode)')
    args = parser.parse_args()

    config = read_configuration()

    generate_notifications(args, config)
